coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, size = 25, bold = TRUE),
legend.position = c(0.3, 0.2)) # Center plot title
df_africa_mask <- replace_na(complete(df_africa_mask, lon, lat), list(grid_code = 0))
df_africa_r_not <- data.frame(Longitude = df_africa$Longitude, Latitude = df_africa$Latitude,
MAT = df_africa$MAT, R_not = ifelse(is.na(r_not_afun(df_africa$MAT)), 0, r_not_afun(df_africa$MAT)), Rate_of_increase = derivative_r_not_afun(df_africa$MAT))
rast <- st_set_crs(st_as_stars(df_africa_r_not, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast)
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_mansoni_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_mansoni_africa_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = 0.4) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.mansoni) )),
fill = expression(paste(R[0]))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
element_text(size=14, face="bold.italic", hjust=0.5),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$Rate_of_increase[mask_rast$grid_code == 1] <- NA
pdf(file = "s_mansoni_africa_r_not_derivative.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = Rate_of_increase), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = .1) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = "",
fill =  expression(frac("dR"[0], dT))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 25, fontface = "bold"),
legend.position = c(0.3, 0.2)) # Center plot title
mask_rast <- st_warp(mask_rast, rast)
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_mansoni_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_mansoni_africa_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = 0.4) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.mansoni) )),
fill = expression(paste(R[0]))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
element_text(hjust = 0.5, size=25, face="bold.italic"),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_mansoni_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_mansoni_africa_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = 0.4) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.mansoni) )),
fill = expression(paste(R[0]))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$Rate_of_increase[mask_rast$grid_code == 1] <- NA
pdf(file = "s_mansoni_africa_r_not_derivative.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = Rate_of_increase), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = .1) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = "",
fill =  expression(frac("dR"[0], dT))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_mansoni_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_mansoni_africa_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = 0.4) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.mansoni) )),
fill = expression(paste(R[0]))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_mansoni_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_mansoni_africa_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = 0.4) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.mansoni) )),
fill = expression(paste(R[0]))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title =  element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$Rate_of_increase[mask_rast$grid_code == 1] <- NA
pdf(file = "s_mansoni_africa_r_not_derivative.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = Rate_of_increase), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = .1) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = "",
fill =  expression(frac("dR"[0], dT))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/thermal_sensitive_paper_code/submitted_first_paper_code/s.haematobium/plot_africa_continent")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/thermal_sensitive_paper_code/submitted_first_paper_code/s.haematobium/plot_africa_continent/plot_r_not_derivative_r_not.R")
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_haematobium_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_haematobium_africa_continent_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "viridis", na.value = "white", direction = -1, begin = 0.2) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.haematobium) )),
fill = expression(paste(R[0])), size = 25, face="bold.italic") +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
rast$Rate_of_increase[mask_rast$grid_code == 1] <- NA
pdf(file = "s_haematobium_africa_r_not_derivative.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = Rate_of_increase), data = rast) +
scale_fill_viridis_c(option = "viridis", na.value = "white", direction = -1, begin = .05) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = " ",
fill =  expression(frac("dR"[0], dT)), size = 25) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
pdf(file = "s_haematobium_africa_continent_MAT.pdf", width = 8, height = 8)
ggplot() +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = "white", color = "black", size = 0.1) +
geom_point(data = df_africa_r_not, aes(x = Longitude, y = Latitude, size = MAT, color = MAT),
alpha = .5) +
scale_size_continuous(range = c(0, 2)) +  # Adjust based on your data
scale_color_gradient(low = "white", high = "red", guide = "legend") +  # Adjust colors for gradient
theme_void()
dev.off()
rast$Rate_of_increase[mask_rast$grid_code == 1] <- NA
pdf(file = "s_haematobium_africa_r_not_derivative.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = Rate_of_increase), data = rast) +
scale_fill_viridis_c(option = "viridis", na.value = "white", direction = -1, begin = .05) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = " ",
fill =  expression(frac("dR"[0], dT)), size = 30) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper_code/2024_march_6st_ver_R/s.haematobium/heat_map")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper_code/2024_march_6st_ver_R/s.haematobium/heat_map/seaso_temp_heat_map.R")
# The reduction of mortality due to estivation
re_est <- 20
re_est_i <- 2
# Set minimum temperature
min_tem <- 12;
# Set maximum temperature
max_tem <- 33;
# Set a sequence of temperature
temperature <- seq(min_tem, max_tem, .25);
# number of year to run
year <- 30
# Set time span for model running
run_time <- seq(from = 0, to = 365*year, by = 0.1)
#set a sample space for temperature
sample_parameters <- seq(from = 0, to = 365*year+1, by = 1)
min_season <- 0
max_season <- 0.6
#seasonality value
seasonality <- seq(min_season, max_season, 0.01);
# Generate an empty matrix to record outcome of the runs
out_come_season <- matrix(nrow = length(seasonality), ncol = length(temperature))
# combine two piece wise function of mu_i
preds_mu_i <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_mu <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_nu_s <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_mu_m <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_sigma_s <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_nu_c <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_mu_c <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_delta_e <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_beta_s <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_beta_h <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_in_estivation <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
preds_out_estivation <- matrix(nrow = length(temperature), ncol = length(sample_parameters))
for(epsilon in 1:length(seasonality)){
for(j in 1:length(temperature)){
#set seasonal temperature
seasonal_temperature <-data.frame(temp = temperature[j] * (1 + seasonality[epsilon] * sin(2 * pi * sample_parameters/365)))
preds_nu_s[j,] <- ifelse(fn_nu_s(seasonal_temperature)$.fitted >= 0,
fn_nu_s(seasonal_temperature)$.fitted,0)
preds_mu[j,] <- ifelse(seasonal_temperature$temp <= 33,
ifelse(fn_mu_1(seasonal_temperature)$.fitted >= 0,fn_mu_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_2(seasonal_temperature)$.fitted >= 0,fn_mu_2(seasonal_temperature)$.fitted, 0))
preds_mu_m[j,] <- ifelse(fn_mu_m(seasonal_temperature)$.fitted >= 0,
fn_mu_m(seasonal_temperature)$.fitted,0)
preds_sigma_s[j,] <- ifelse(fn_sigma_s(seasonal_temperature)$.fitted >= 0,
fn_sigma_s(seasonal_temperature)$.fitted,0)
preds_mu_i[j,] <- ifelse(seasonal_temperature$temp <= 33.5,
ifelse(fn_mu_i_1(seasonal_temperature)$.fitted >= 0,fn_mu_i_1(seasonal_temperature)$.fitted, 0),
ifelse(fn_mu_i_2(seasonal_temperature)$.fitted >= 0,fn_mu_i_2(seasonal_temperature)$.fitted, 0))
preds_nu_c[j,] <- ifelse(fn_nu_c(seasonal_temperature)$.fitted >= 0,
fn_nu_c(seasonal_temperature)$.fitted,0)
preds_mu_c[j,] <- ifelse(fn_mu_c(seasonal_temperature)$.fitted >= 0,
fn_mu_c(seasonal_temperature)$.fitted,0)
preds_delta_e[j,] <- ifelse(fn_delta_e(seasonal_temperature)$.fitted >= 0,
fn_delta_e(seasonal_temperature)$.fitted,0)
preds_beta_s[j,] <- ifelse(fn_beta_s(seasonal_temperature)$.fitted >= 0,
fn_beta_s(seasonal_temperature)$.fitted, 0)
preds_beta_h[j,] <- ifelse(fn_beta_h(seasonal_temperature)$.fitted >= 0,
fn_beta_h(seasonal_temperature)$.fitted, 0)
preds_in_estivation[j,] <- piecewise_function(seasonal_temperature$temp)
preds_out_estivation[j,] <- -piecewise_function(seasonal_temperature$temp) + est_rate
}
solution_for_temp <- function(index){
# Generate linearly interpolate point with temperature dependent parameter function
nu_s_afun <- approxfun(x = sample_parameters, y = preds_nu_s[index,])
mu_afun <- approxfun(x = sample_parameters, y = preds_mu[index,])
mu_m_afun <- approxfun(x = sample_parameters, y = preds_mu_m[index,])
sigma_s_afun <- approxfun(x = sample_parameters, y = preds_sigma_s[index,])
mu_i_afun <- approxfun(x = sample_parameters, y = preds_mu_i[index, ])
nu_c_afun <- approxfun(x = sample_parameters, y = preds_nu_c[index,])
mu_c_afun <- approxfun(x = sample_parameters, y = preds_mu_c[index,])
delta_e_afun <- approxfun(x = sample_parameters, y = preds_delta_e[index,])
beta_s_afun <- approxfun(x = sample_parameters, y = preds_beta_s[index,])
beta_h_afun <- approxfun(x = sample_parameters, y = preds_beta_h[index,])
in_estivation_afun <- approxfun(x = sample_parameters, y = preds_in_estivation[index,])
out_estivation_afun <- approxfun(x = sample_parameters, y = preds_out_estivation[index,])
#Call the library
library(deSolve)
#the diff equation solver
thermal_sensitive_model <- function(t, y, parms){
with(as.list(c(y, parms)),
{
nu_s <- nu_s_afun(t)
mu_m <- mu_m_afun(t)
mu <- mu_afun(t)
sigma_s <- sigma_s_afun(t)
mu_i <- mu_i_afun(t)
nu_c <- nu_c_afun(t)
mu_c <- mu_c_afun(t)
delta_e <- delta_e_afun(t)
beta_s <- beta_s_afun(t)
beta_h <- beta_h_afun(t)
in_est <- in_estivation_afun(t)
out_est <- out_estivation_afun(t)
dS <- (nu_s - (S + E + I) * nu) * (S + r * E) -  lambda * (1-exp(-(beta_s * delta_e * nu_e * h * P_m)/(mu_m * (S + E + I)))) * S - mu * S - in_est * S + out_est * SE
dSE <- in_est * S - mu/re_est * SE - out_est * SE
dE <- lambda * (1-exp(-(beta_s * delta_e * nu_e *h * P_m)/(mu_m * (S + E + I)))) * S - (sigma_s + mu_i) * E - in_est*E + out_est * EE
dEE <- in_est * E - mu_i/re_est_i * EE - out_est * EE
dI <- sigma_s * E - mu_i * I - in_est*I + out_est * IE
dIE <- in_est * I - mu_i/re_est_i * IE - out_est * IE
dP <- beta_h * (nu_c/mu_c) * I - sigma_p * P
dP_m <- sigma_p * P - (mu_h + mu_p) * P_m
return(list(c(S = dS, SE = dSE, E = dE, EE = dEE, I = dI, IE = dIE, P = dP, P_m = dP_m)))
})
}
# Specified the parameter value. These might be changed later because they are prevalence dependent.
parms0 <- c(nu, lambda)
# Set the initial conditions
y0 <- c(S = (60434 + 33232)/2, SE = 0,  E = 1285, EE = 0, I = 2340, IE = 0, P = 2, P_m = 105)
## solve the system
model_outputs <- ode(y = y0, times = run_time, func = thermal_sensitive_model, parms = parms0)
# record the results
out_put <- mean(model_outputs[(length(model_outputs[, 1])-366):length(model_outputs[, 1]),9])
return(out_put)
}
#Setup backend to use many processors
totalCores = detectCores()
#Leave one core to avoid overload your computer
cluster <- makeCluster(totalCores[1]-1)
registerDoParallel(cluster)
# Parallel loop using %dopar%
out_come_for_each_temperature <- foreach(k = 1:length(temperature), .combine = c) %dopar% {
result <- solution_for_temp(k)
return(result)
}
#Stop cluster
stopCluster(cluster)
out_come_season[epsilon, ] <- out_come_for_each_temperature
}
# Repeat the column n times
epsilon_matrix <- matrix(rep(seasonality, length(temperature)), nrow = length(seasonality), byrow = FALSE)
temp_matrix <- matrix(rep(temperature, length(seasonality)), nrow = length(seasonality), byrow = TRUE)
out_come_season[is.nan(out_come_season)] <- 0
# save the mean parasite burden as data frame for plot
df <- data.frame(x = as.vector(temp_matrix), y = as.vector(epsilon_matrix), MPB = as.vector(out_come_season))
# upload th library
library(ggplot2)
# Plot the results and print
pdf(file="heat_map.pdf", width = 8, height = 5)
par(mfrow=c(2,1))
densit_plot <- ggplot(df, aes(x = x, y = y, colour = MPB,), x ) + geom_point(size = 4, shape = 15)
densit_plot + scale_color_gradient(low="white", high="red") + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))+labs(x = "Mean annual temperature", y = expression(paste("Seasonality  ", (epsilon))))+
theme(axis.text = element_text(size = 20,color = "black")) + theme(axis.title = element_text(size = 20,color = "black"))
dev.off()
save.image("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/seasonal_paper_code/2024_march_6st_ver_R/s.haematobium/heat_map/data_run.RData")
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/thermal_sensitive_paper_code/submitted_first_paper_code/s.mansoni/plot_africa_continent")
#load the parameters
source("par_set_mansoni.R")
########################## CALCULATE R_NOT ##################
min_temp <- 10
max_temp <- 40
# Generate a sequence of temperature
temperature <- data.frame(temp = seq(min_temp, max_temp, by = 0.1))
# combine two piece wise function of mu_i
preds_1 <- fn_mu_i_1(temperature)$.fitted[which(temperature$temp <= 33.5)]
preds_2 <- fn_mu_i_2(temperature)$.fitted[which(temperature$temp > 33.5)]
# This is mu_i function
preds_mu_i <- c(preds_1, preds_2)
# This is analytic representation of R not value without control.
r_not <- (abs(lambda * fn_beta_s(temperature)$.fitted * h * fn_delta_e(temperature)$.fitted * nu_e
* fn_beta_h(temperature)$.fitted * fn_nu_c(temperature)$.fitted * fn_sigma_s(temperature)$.fitted/
(fn_mu_m(temperature)$.fitted * (mu_h + mu_p) * fn_mu_c(temperature)$.fitted * preds_mu_i *
(fn_sigma_s(temperature)$.fitted + preds_mu_i))))^(1/2)
anyNA(r_not)
# Assuming you already have r_not_afun defined
r_not_afun <- approxfun(x = temperature$temp, y = r_not)
# Numerically compute the derivative
derivative_r_not <- function(x, h = 1e-6) {
(r_not_afun(x + h) - r_not_afun(x - h)) / (2 * h)
}
derivative_r_not_afun <- approxfun(x = temperature$temp, y = derivative_r_not(temperature$temp))
# Load required libraries
library(maps)
library(ggplot2)
library(sf)
library(tidyr)
# Get world map data
world_map <- map_data("world")
# Filter data for Africa
africa_map <- subset(world_map, region %in% c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso",
"Burundi", "Cameroon", "Cape Verde", "Central African Republic",
"Chad", "Comoros", "Democratic Republic of the Congo", "Republic of Congo",
"Djibouti", "Egypt", "Equatorial Guinea", "Eritrea", "Eswatini",
"Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau",
"Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar",
"Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique",
"Namibia", "Niger", "Nigeria", "Rwanda", "Sao Tome and Principe",
"Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa",
"South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda",
"Zambia", "Zimbabwe"))
# upload prevalence data
df_africa <- read.csv(file = 'africa_mpb.csv')
df_africa_mask <- read.csv(file = 'africa_mask_v1.csv')
df_africa_mask <- replace_na(complete(df_africa_mask, lon, lat), list(grid_code = 0))
df_africa_r_not <- data.frame(Longitude = df_africa$Longitude, Latitude = df_africa$Latitude,
MAT = df_africa$MAT, R_not = r_not_afun(df_africa$MAT), Rate_of_increase = derivative_r_not_afun(df_africa$MAT))
rast <- st_set_crs(st_as_stars(df_africa_r_not, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast)
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_mansoni_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_mansoni_africa_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "rocket", na.value = "white", direction = -1, begin = 0.4) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.mansoni) )),
fill = expression(paste(R[0]))) +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title =  element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/thermal_sensitive_paper_code/submitted_first_paper_code/s.haematobium/plot_africa_continent")
#load the parameters
source("par_set_haematobium.R")
########################## CALCULATE R_NOT ##################
min_temp <- 12
max_temp <- 37
# Generate a sequence of temperature
temperature <- data.frame(temp = seq(min_temp, max_temp, by = 0.1))
# combine two piece wise function of mu_i
preds_1 <- fn_mu_i_1(temperature)$.fitted[which(temperature$temp <= 33.5)]
preds_2 <- fn_mu_i_2(temperature)$.fitted[which(temperature$temp > 33.5)]
# This is mu_i function
preds_mu_i <- c(preds_1, preds_2)
# This is analytic representation of R not value without control.
r_not <- (abs(lambda * fn_beta_s(temperature)$.fitted * h * fn_delta_e(temperature)$.fitted * nu_e
* fn_beta_h(temperature)$.fitted * fn_nu_c(temperature)$.fitted * fn_sigma_s(temperature)$.fitted/
(fn_mu_m(temperature)$.fitted * (mu_h + mu_p) * fn_mu_c(temperature)$.fitted * preds_mu_i *
(fn_sigma_s(temperature)$.fitted + preds_mu_i))))^(1/2)
# Assuming you already have r_not_afun defined
r_not_afun <- approxfun(x = temperature$temp, y = r_not)
# Numerically compute the derivative
derivative_r_not <- function(x, h = 1e-6) {
(r_not_afun(x + h) - r_not_afun(x - h)) / (2 * h)
}
derivative_r_not_afun <- approxfun(x = temperature$temp, y = derivative_r_not(temperature$temp))
# Load required libraries
library(maps)
library(ggplot2)
library(sf)
library(tidyr)
library(stars)
# Get world map data
world_map <- map_data("world")
# Filter data for Africa
africa_map <- subset(world_map, region %in% c("Algeria", "Angola", "Benin", "Botswana", "Burkina Faso",
"Burundi", "Cameroon", "Cape Verde", "Central African Republic",
"Chad", "Comoros", "Democratic Republic of the Congo", "Republic of Congo",
"Djibouti", "Egypt", "Equatorial Guinea", "Eritrea", "Eswatini",
"Ethiopia", "Gabon", "Gambia", "Ghana", "Guinea", "Guinea-Bissau",
"Ivory Coast", "Kenya", "Lesotho", "Liberia", "Libya", "Madagascar",
"Malawi", "Mali", "Mauritania", "Mauritius", "Morocco", "Mozambique",
"Namibia", "Niger", "Nigeria", "Rwanda", "Sao Tome and Principe",
"Senegal", "Seychelles", "Sierra Leone", "Somalia", "South Africa",
"South Sudan", "Sudan", "Tanzania", "Togo", "Tunisia", "Uganda",
"Zambia", "Zimbabwe"))
# upload prevalence data
df_africa <- read.csv(file = 'africa_mpb.csv')
df_africa_mask <- read.csv(file = 'africa_mask_v1.csv')
df_africa_mask <- replace_na(complete(df_africa_mask, lon, lat), list(grid_code = 0))
df_africa_r_not <- data.frame(Longitude = df_africa$Longitude, Latitude = df_africa$Latitude,
MAT = df_africa$MAT, R_not = r_not_afun(df_africa$MAT), Rate_of_increase = derivative_r_not_afun(df_africa$MAT))
rast <- st_set_crs(st_as_stars(df_africa_r_not, coords = c("Longitude", "Latitude")), 4326)
mask_rast <- st_set_crs(st_as_stars(df_africa_mask, coords = c("lat", "lon")), 4326)
mask_rast <- st_warp(mask_rast, rast)
rast$R_not[mask_rast$grid_code == 1] <- NA
# Write the data frame to a CSV file
#write.csv(df_africa_r_not,"s_haematobium_r_not_rate_change.csv", row.names = FALSE)
# Plot the map with intensity of color based on value
pdf(file = "s_haematobium_africa_continent_r_not.pdf", width = 8, height = 8)
ggplot() +
geom_stars(aes(fill = R_not), data = rast) +
scale_fill_viridis_c(option = "viridis", na.value = "white", direction = -1, begin = 0.2) +
geom_map(data = africa_map, map = africa_map,
aes(map_id = region),
fill = NA, color = "black", size = 0.5) +
labs(title = expression(paste(italic(S.haematobium) )),
fill = expression(paste(R[0])), size = 25, face="bold.italic") +  # Add title and color legend title
theme_void() +
coord_sf() +
theme(  # Adjust plot margins
plot.title = element_text(hjust = 0.5, face = "bold", size = 27),
legend.position = c(0.3, 0.2)) # Center plot title
dev.off()
