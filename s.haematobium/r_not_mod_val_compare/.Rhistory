temp_has_74_a_h <- c(35,    37)
rate_has_74_a_h <- c(0.03891, 0.3)
# Data
temp <- c(temp_joubert_86_p,  temp_has_74_a_h)
rate <- c(rate_joubert_86_p,  rate_has_74_a_h)
d_2 <- data.frame(temp, rate)
# fit Sharpe-Schoolfield model to raw data
d_fit <- nest(d_2, data = c(temp, rate)) %>%
mutate(sharpeschoollow_1981 = map(data, ~nls_multstart(rate~sharpeschoollow_1981(temp = temp, r_tref,e,el,tl, tref = 15),
data = .x,
iter = c(4,4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981'),
supp_errors = 'Y',
convergence_count = FALSE)),
# create new temperature data
new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), , by = 0.1))),
# predict over that data,
preds =  map2(sharpeschoollow_1981, new_data, ~augment(.x, newdata = .y)))
# refit model using nlsLM
fit_nlsLM2 <- nlsLM(rate~sharpeschoollow_1981(temp = temp, r_tref,e,el,tl, tref = 15),
data = d_2,
start = coef(d_fit$sharpeschoollow_1981[[1]]),
lower = get_lower_lims(d_2$temp, d_2$rate, model_name = 'sharpeschoollow_1981'),
upper = get_upper_lims(d_2$temp, d_2$rate, model_name = 'sharpeschoollow_1981'),
control = nls.lm.control(maxiter=500),
weights = rep(1, times = nrow(d_2)))
# bootstrap using residual resampling
boot3 <- Boot(fit_nlsLM2, method = 'residual')
# predict over new data
boot3_preds_2 <- boot3$t %>%
as.data.frame() %>%
drop_na() %>%
mutate(iter = 1:n()) %>%
group_by_all() %>%
do(data.frame(temp = seq(min_temp_2, max_temp_2, by = 0.1))) %>%
ungroup() %>%
mutate(pred = sharpeschoollow_1981(temp = temp, r_tref,e,el,tl, tref = 15))
boot_preds_mu <- data.frame(matrix(0, ncol = 2, nrow = length(boot1_preds_beta_h$temp)))
colnames(boot_preds_mu) = c("temp","pred")
temp_row_length_1 <- length(seq(min_temp, max_temp, by = 0.1))
temp_row_length_2 <- length(seq(min_temp_2, max_temp_2, by = 0.1))
for (k in 1:(length(boot1_preds_beta_h$temp)/temp_row_length_1)){
temp_boot_1 <- boot1_preds_mu[(1+(k-1)*temp_row_length_1):(k*temp_row_length_1),]
temp_boot_2 <- boot3_preds_2[(1+(k-1)*temp_row_length_2):(k*temp_row_length_2),]
boot_preds_mu[(1+(k-1)*temp_row_length_1):(k*temp_row_length_1), 1:2] <- rbind(temp_boot_1[which(temp_boot_1$temp <= 37), 6:7], temp_boot_2[which(temp_boot_2$temp > 37), 6:7])
}
########################## CALCULATE R_NOT ##################
# This is analytic representation of R not value without control.
r_not_boot <- (lambda * (boot1_preds_beta_s$pred * contact_reduction_s) * h * boot1_preds_delta_e$pred * nu_e * (boot1_preds_beta_h$pred * contact_reduction_h)
* boot1_preds_nu_c$pred * boot1_preds_sigma_s$pred/
(boot1_preds_mu_m$pred * (mu_h + mu_p) * boot3_preds_mu_c$pred * boot_preds_mu_i$pred
* (boot1_preds_sigma_s$pred + boot_preds_mu_i$pred)))^(1/2)
temp <- boot1_preds_beta_h$temp
boot_out_puts <- data.frame(temp, r_not_boot)
# calculate bootstrapped confidence intervals
boot_conf_preds <- boot_out_puts %>% group_by(temp) %>%
summarise(conf_lower = quantile(r_not_boot, 0.025, na.rm = TRUE),
conf_upper = quantile(r_not_boot, 0.975, na.rm = TRUE)) %>%
ungroup()
optim_temps <- c()
temp_row_length <- length(seq(min_temp, max_temp, by = 0.1))
for (i in 1:(length(boot1_preds_beta_h$temp)/temp_row_length)){
index <-  which.max(r_not_boot[(1+(i-1)*temp_row_length):(temp_row_length*i)])
optim_temps[i] <- boot_out_puts$temp[index+(i-1)*temp_row_length]
}
lower_bound <- quantile(optim_temps, 0.25, na.rm = TRUE)
upper_bound <- quantile(optim_temps, 0.75, na.rm = TRUE)
lower_bound
upper_bound
min_temp <- 12
max_temp <- 37
# Generate a sequence of temperature
temperature <- data.frame(temp = seq(min_temp, max_temp, by = 0.1))
# combine two piece wise function of mu_i
preds_1 <- fn_mu_i_1(temperature)$.fitted[which(temperature$temp <= 37)]
preds_2 <- fn_mu_i_2(temperature)$.fitted[which(temperature$temp > 37)]
# This is mu_i function
preds_mu_i <- c(preds_1, preds_2)
# This is analytic representation of R not value without control.
r_not_best <- (abs(lambda * fn_beta_s(temperature)$.fitted * h * fn_delta_e(temperature)$.fitted * nu_e
* fn_beta_h(temperature)$.fitted * fn_nu_c(temperature)$.fitted * fn_sigma_s(temperature)$.fitted/
(fn_mu_m(temperature)$.fitted * (mu_h + mu_p) * fn_mu_c(temperature)$.fitted * preds_mu_i *
(fn_sigma_s(temperature)$.fitted + preds_mu_i))))^(1/2)
plot(temperature$temp, r_not_best)
r_not_data <- data.frame(temperature, r_not_best)
# We actually do this to test Nguyen results with our model, we do simulation with increasing some of
# our parameter values as disease control strategies.
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
head(prev_percent)
sch_mansoni_ind <- which(prev_percent$parasite_s == "S. mansoni")
sch_mansoni <- prev_percent[sch_mansoni_ind, ]
sch_mansoni <- sch_mansoni[-c(which(is.na(sch_mansoni$bio01))),]
sch_mansoni_sort <- sch_mansoni[order(sch_mansoni$bio01), ]
sum(is.na(sch_mansoni_sort$bio01))
length(sch_mansoni_sort$bio01)
sch_mansoni_temp_unq <- sch_mansoni %>% group_by(bio01) %>%
summarize(med = median(percent_pos), na.rm = TRUE)
sch_mansoni_temp_unq_mean <- sch_mansoni %>% group_by(bio01) %>%
summarize(the_mean = mean(percent_pos), na.rm = TRUE)
# plot bootstrapped CIs
pdf(file = "mansoni_data_median.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(bio01, med), sch_mansoni_temp_unq, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
# plot bootstrapped CIs
pdf(file = "mansoni_data_mean.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(bio01, the_mean), sch_mansoni_temp_unq_mean, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
bins_maker <- function(percentile, lenth_of_bin){
out_put <- matrix(0, nrow = 4, ncol = round(length(sch_mansoni_sort$bio01)/lenth_of_bin))
for (i in 1:round(length(sch_mansoni_sort$bio01)/lenth_of_bin)){
index_of_bin <- (1+(i-1)*lenth_of_bin):(i*lenth_of_bin)
out_put[1, i] <- sch_mansoni_sort$bio01[index_of_bin[lenth_of_bin/2]]
out_put[2, i] <- quantile(sch_mansoni_sort$percent_pos[index_of_bin], na.rm = TRUE, probs = percentile)
out_put[3, i] <- mean(sch_mansoni_sort$percent_pos[index_of_bin], na.rm = TRUE)
out_put[4, i] <- median(sch_mansoni_sort$percent_pos[index_of_bin], na.rm = TRUE)
}
return(out_put)
}
bins_data <-bins_maker(percentile = .98, lenth_of_bin = 400)
d <- data.frame(bins_data[1,], bins_data[2,])
colnames(d) <- c("temp", "prev")
# plot bootstrapped CIs
pdf(file = "mansoni_boost_r_not.pdf", width = 5, height = 5)
ggplot() +
geom_line(aes(temp, r_not_best), r_not_data, col = 'red', size = 1,) +
geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot_conf_preds, fill = 'red', alpha = 0.1) +
geom_point(aes(temp, prev*max(r_not_best)/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
labs(title = "S.mansoni", x = 'Temperature (ºC)',y = expression("R"[0]))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
d_mean <- data.frame(bins_data[1,], bins_data[3,])
colnames(d_mean) <- c("temp", "mean")
# plot bootstrapped CIs
pdf(file = "mansoni_data_mean_bin.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(temp, mean), d_mean, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
d_median <- data.frame(bins_data[1,], bins_data[4,])
colnames(d_median) <- c("temp", "median")
# plot bootstrapped CIs
pdf(file = "mansoni_data_median_bin.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(temp, median), d_median, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
############# Nguyen's result plot ######################
temp <- c(15.127, 15.763, 16.525, 16.949, 17.458, 17.881, 18.305, 18.814, 19.322, 19.831, 20.508, 21.186, 21.949, 22.797, 23.644, 24.153, 24.746,  25.085, 25.593,  26.102,  26.61,  27.119,  27.542,  28.136,  28.898, 29.576, 30.339,  31.441, 32.458, 33.814, 34.619)
rate <- c(0.11, 0.172, 0.282, 0.373, 0.467, 0.533, 0.621,  0.712, 0.806, 0.884, 0.953, 0.984, 0.994,  0.95, 0.84, 0.765, 0.665, 0.586,  0.502, 0.439, 0.376, 0.301, 0.254, 0.197, 0.144, 0.11, 0.072, 0.038, 0.025, 0.009, 0.009)
# keep just a single curve
.x <- data.frame(temp, rate)
nguyen <- nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),
data = .x,
iter = c(4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
supp_errors = 'Y')
fn_nguyen <- function(x) augment(nguyen, newdata = x)
df <- data.frame(x = r_not_data$temp, y2 = r_not_data$r_not_best, y1 = fn_nguyen(temperature)$.fitted)
# plot bootstrapped CIs
pdf(file = "mansoni_compare_boost_r_not.pdf", width = 5, height = 5)
ggplot(data = df, aes(x = x)) +
geom_line(aes(y = y1/max(y1), colour = "Prev. Est."),size=1) +
geom_line(aes(y = y2/max(y2), colour = "New Est."), size=1) +
scale_colour_manual("",
breaks = c("Prev. Est.", "New Est."),
values = c("grey", "red")) +
geom_point(aes(temp, prev/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
geom_ribbon(aes(temp, ymin = conf_lower/max(r_not_best), ymax = conf_upper/max(r_not_best)), boot_conf_preds, fill = 'red', alpha = 0.1) +
labs(title = "S.mansoni", x = '',y = expression("R"[0]/max(("R"[0]))))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5)) +
# Temperature (ºC)
# Add mark segment
annotate("text", x = temperature$temp[which.max(df$y1)], y = 0, label = '^', colour = "grey", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y1)], y = 0.08,  label = round(df$x[which.max(df$y1)],1), colour = "grey", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y2)], y = 0, label = '^', colour = "red", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y2)], y = 0.08, label = round(df$x[which.max(df$y2)],1), colour = "red", size = 5) +
# Add horizontal line segment
geom_segment(aes(x = lower_bound, y = -0.02, xend = upper_bound, yend = -0.02), colour = "red", size = 1)
dev.off()
lower_bound <- quantile(optim_temps, 0.025, na.rm = TRUE)
upper_bound <- quantile(optim_temps, 0.975, na.rm = TRUE)
lower_bound
upper_bound
min_temp <- 12
max_temp <- 37
# Generate a sequence of temperature
temperature <- data.frame(temp = seq(min_temp, max_temp, by = 0.1))
# combine two piece wise function of mu_i
preds_1 <- fn_mu_i_1(temperature)$.fitted[which(temperature$temp <= 37)]
preds_2 <- fn_mu_i_2(temperature)$.fitted[which(temperature$temp > 37)]
# This is mu_i function
preds_mu_i <- c(preds_1, preds_2)
# This is analytic representation of R not value without control.
r_not_best <- (abs(lambda * fn_beta_s(temperature)$.fitted * h * fn_delta_e(temperature)$.fitted * nu_e
* fn_beta_h(temperature)$.fitted * fn_nu_c(temperature)$.fitted * fn_sigma_s(temperature)$.fitted/
(fn_mu_m(temperature)$.fitted * (mu_h + mu_p) * fn_mu_c(temperature)$.fitted * preds_mu_i *
(fn_sigma_s(temperature)$.fitted + preds_mu_i))))^(1/2)
plot(temperature$temp, r_not_best)
r_not_data <- data.frame(temperature, r_not_best)
# We actually do this to test Nguyen results with our model, we do simulation with increasing some of
# our parameter values as disease control strategies.
prev_percent <- read.csv(file = 'gntd_vars_all.csv')
head(prev_percent)
sch_mansoni_ind <- which(prev_percent$parasite_s == "S. mansoni")
sch_mansoni <- prev_percent[sch_mansoni_ind, ]
sch_mansoni <- sch_mansoni[-c(which(is.na(sch_mansoni$bio01))),]
sch_mansoni_sort <- sch_mansoni[order(sch_mansoni$bio01), ]
sum(is.na(sch_mansoni_sort$bio01))
length(sch_mansoni_sort$bio01)
sch_mansoni_temp_unq <- sch_mansoni %>% group_by(bio01) %>%
summarize(med = median(percent_pos), na.rm = TRUE)
sch_mansoni_temp_unq_mean <- sch_mansoni %>% group_by(bio01) %>%
summarize(the_mean = mean(percent_pos), na.rm = TRUE)
# plot bootstrapped CIs
pdf(file = "mansoni_data_median.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(bio01, med), sch_mansoni_temp_unq, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
# plot bootstrapped CIs
pdf(file = "mansoni_data_mean.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(bio01, the_mean), sch_mansoni_temp_unq_mean, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
bins_maker <- function(percentile, lenth_of_bin){
out_put <- matrix(0, nrow = 4, ncol = round(length(sch_mansoni_sort$bio01)/lenth_of_bin))
for (i in 1:round(length(sch_mansoni_sort$bio01)/lenth_of_bin)){
index_of_bin <- (1+(i-1)*lenth_of_bin):(i*lenth_of_bin)
out_put[1, i] <- sch_mansoni_sort$bio01[index_of_bin[lenth_of_bin/2]]
out_put[2, i] <- quantile(sch_mansoni_sort$percent_pos[index_of_bin], na.rm = TRUE, probs = percentile)
out_put[3, i] <- mean(sch_mansoni_sort$percent_pos[index_of_bin], na.rm = TRUE)
out_put[4, i] <- median(sch_mansoni_sort$percent_pos[index_of_bin], na.rm = TRUE)
}
return(out_put)
}
bins_data <-bins_maker(percentile = .5, lenth_of_bin = 400)
d <- data.frame(bins_data[1,], bins_data[2,])
colnames(d) <- c("temp", "prev")
# plot bootstrapped CIs
pdf(file = "mansoni_boost_r_not.pdf", width = 5, height = 5)
ggplot() +
geom_line(aes(temp, r_not_best), r_not_data, col = 'red', size = 1,) +
geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot_conf_preds, fill = 'red', alpha = 0.1) +
geom_point(aes(temp, prev*max(r_not_best)/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
labs(title = "S.mansoni", x = 'Temperature (ºC)',y = expression("R"[0]))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
d_mean <- data.frame(bins_data[1,], bins_data[3,])
colnames(d_mean) <- c("temp", "mean")
# plot bootstrapped CIs
pdf(file = "mansoni_data_mean_bin.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(temp, mean), d_mean, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
d_median <- data.frame(bins_data[1,], bins_data[4,])
colnames(d_median) <- c("temp", "median")
# plot bootstrapped CIs
pdf(file = "mansoni_data_median_bin.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(temp, median), d_median, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
############# Nguyen's result plot ######################
temp <- c(15.127, 15.763, 16.525, 16.949, 17.458, 17.881, 18.305, 18.814, 19.322, 19.831, 20.508, 21.186, 21.949, 22.797, 23.644, 24.153, 24.746,  25.085, 25.593,  26.102,  26.61,  27.119,  27.542,  28.136,  28.898, 29.576, 30.339,  31.441, 32.458, 33.814, 34.619)
rate <- c(0.11, 0.172, 0.282, 0.373, 0.467, 0.533, 0.621,  0.712, 0.806, 0.884, 0.953, 0.984, 0.994,  0.95, 0.84, 0.765, 0.665, 0.586,  0.502, 0.439, 0.376, 0.301, 0.254, 0.197, 0.144, 0.11, 0.072, 0.038, 0.025, 0.009, 0.009)
# keep just a single curve
.x <- data.frame(temp, rate)
nguyen <- nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),
data = .x,
iter = c(4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
supp_errors = 'Y')
fn_nguyen <- function(x) augment(nguyen, newdata = x)
df <- data.frame(x = r_not_data$temp, y2 = r_not_data$r_not_best, y1 = fn_nguyen(temperature)$.fitted)
# plot bootstrapped CIs
pdf(file = "mansoni_compare_boost_r_not.pdf", width = 5, height = 5)
ggplot(data = df, aes(x = x)) +
geom_line(aes(y = y1/max(y1), colour = "Prev. Est."),size=1) +
geom_line(aes(y = y2/max(y2), colour = "New Est."), size=1) +
scale_colour_manual("",
breaks = c("Prev. Est.", "New Est."),
values = c("grey", "red")) +
geom_point(aes(temp, prev/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
geom_ribbon(aes(temp, ymin = conf_lower/max(r_not_best), ymax = conf_upper/max(r_not_best)), boot_conf_preds, fill = 'red', alpha = 0.1) +
labs(title = "S.mansoni", x = '',y = expression("R"[0]/max(("R"[0]))))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5)) +
# Temperature (ºC)
# Add mark segment
annotate("text", x = temperature$temp[which.max(df$y1)], y = 0, label = '^', colour = "grey", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y1)], y = 0.08,  label = round(df$x[which.max(df$y1)],1), colour = "grey", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y2)], y = 0, label = '^', colour = "red", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y2)], y = 0.08, label = round(df$x[which.max(df$y2)],1), colour = "red", size = 5) +
# Add horizontal line segment
geom_segment(aes(x = lower_bound, y = -0.02, xend = upper_bound, yend = -0.02), colour = "red", size = 1)
dev.off()
bins_data <-bins_maker(percentile = .98, lenth_of_bin = 400)
d <- data.frame(bins_data[1,], bins_data[2,])
colnames(d) <- c("temp", "prev")
# plot bootstrapped CIs
pdf(file = "mansoni_boost_r_not.pdf", width = 5, height = 5)
ggplot() +
geom_line(aes(temp, r_not_best), r_not_data, col = 'red', size = 1,) +
geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot_conf_preds, fill = 'red', alpha = 0.1) +
geom_point(aes(temp, prev*max(r_not_best)/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
labs(title = "S.mansoni", x = 'Temperature (ºC)',y = expression("R"[0]))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
d_mean <- data.frame(bins_data[1,], bins_data[3,])
colnames(d_mean) <- c("temp", "mean")
# plot bootstrapped CIs
pdf(file = "mansoni_data_mean_bin.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(temp, mean), d_mean, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
d_median <- data.frame(bins_data[1,], bins_data[4,])
colnames(d_median) <- c("temp", "median")
# plot bootstrapped CIs
pdf(file = "mansoni_data_median_bin.pdf", width = 5, height = 5)
ggplot() +
geom_point(aes(temp, median), d_median, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
dev.off()
############# Nguyen's result plot ######################
temp <- c(15.127, 15.763, 16.525, 16.949, 17.458, 17.881, 18.305, 18.814, 19.322, 19.831, 20.508, 21.186, 21.949, 22.797, 23.644, 24.153, 24.746,  25.085, 25.593,  26.102,  26.61,  27.119,  27.542,  28.136,  28.898, 29.576, 30.339,  31.441, 32.458, 33.814, 34.619)
rate <- c(0.11, 0.172, 0.282, 0.373, 0.467, 0.533, 0.621,  0.712, 0.806, 0.884, 0.953, 0.984, 0.994,  0.95, 0.84, 0.765, 0.665, 0.586,  0.502, 0.439, 0.376, 0.301, 0.254, 0.197, 0.144, 0.11, 0.072, 0.038, 0.025, 0.009, 0.009)
# keep just a single curve
.x <- data.frame(temp, rate)
nguyen <- nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),
data = .x,
iter = c(4,4,4),
start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,
start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,
lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),
supp_errors = 'Y')
fn_nguyen <- function(x) augment(nguyen, newdata = x)
df <- data.frame(x = r_not_data$temp, y2 = r_not_data$r_not_best, y1 = fn_nguyen(temperature)$.fitted)
# plot bootstrapped CIs
pdf(file = "mansoni_compare_boost_r_not.pdf", width = 5, height = 5)
ggplot(data = df, aes(x = x)) +
geom_line(aes(y = y1/max(y1), colour = "Prev. Est."),size=1) +
geom_line(aes(y = y2/max(y2), colour = "New Est."), size=1) +
scale_colour_manual("",
breaks = c("Prev. Est.", "New Est."),
values = c("grey", "red")) +
geom_point(aes(temp, prev/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
geom_ribbon(aes(temp, ymin = conf_lower/max(r_not_best), ymax = conf_upper/max(r_not_best)), boot_conf_preds, fill = 'red', alpha = 0.1) +
labs(title = "S.mansoni", x = '',y = expression("R"[0]/max(("R"[0]))))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5)) +
# Temperature (ºC)
# Add mark segment
annotate("text", x = temperature$temp[which.max(df$y1)], y = 0, label = '^', colour = "grey", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y1)], y = 0.08,  label = round(df$x[which.max(df$y1)],1), colour = "grey", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y2)], y = 0, label = '^', colour = "red", size = 5) +
annotate("text", x = temperature$temp[which.max(df$y2)], y = 0.08, label = round(df$x[which.max(df$y2)],1), colour = "red", size = 5) +
# Add horizontal line segment
geom_segment(aes(x = lower_bound, y = -0.02, xend = upper_bound, yend = -0.02), colour = "red", size = 1)
dev.off()
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/the_first_paper_code/may_5th_2023_ver_R_script/s.mansoni/r_not_mod_compare")
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/the_first_paper_code/may_5th_2023_ver_R_script/s.mansoni/r_not_mod_compare")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/the_first_paper_code/may_5th_2023_ver_R_script/s.mansoni/r_not_mod_compare/mansoni_boot_r_not.R")
ggplot() +
geom_point(aes(temp, mean), d_mean, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
ggplot() +
geom_point(aes(temp, median), d_median, col = 'red') +
labs(title = "S.mansoni",
x = 'Temperature (ºC)',
y = "Percent of positive case")+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
ggplot() +
geom_line(aes(temp, r_not_best), r_not_data, col = 'red', size = 1,) +
geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot_conf_preds, fill = 'red', alpha = 0.1) +
geom_point(aes(temp, prev*max(r_not_best)/max(prev)), d, size = 1, alpha = 0.5, colour = "red") +
labs(title = "S.mansoni", x = 'Temperature (ºC)',y = expression("R"[0]))+
theme(legend.position="bottom", legend.key = element_rect(fill = "white"), panel.background = element_rect(fill = "white", colour = "black"), text = element_text(size = 17),
axis.text.x = element_text(color="black", size=17), axis.text.y = element_text(color="black", size=17),  panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(size=14, face="bold.italic", hjust=0.5))
prev
d$prev
fn_nguyen(d$temp)$.fitted
fn_nguyen(data.frame(temp = d$temp))$.fitted
d$temp
d$prev
new_temp_data_mss <- data.frame(temp = d$temp)
fn_beta_s(new_temp_data_mss)$.fitted
new_temp_data_mss <- data.frame(temp = d$temp)
# combine two piece wise function of mu_i
preds_1 <- fn_mu_i_1(new_temp_data_mss)$.fitted[which(new_temp_data_mss$temp <= 37)]
preds_2 <- fn_mu_i_2(new_temp_data_mss)$.fitted[which(new_temp_data_mss$temp > 37)]
# This is mu_i function
preds_mu_i <- c(preds_1, preds_2)
r_not_best_mss <- (abs(lambda * fn_beta_s(new_temp_data_mss)$.fitted * h * fn_delta_e(new_temp_data_mss)$.fitted * nu_e
* fn_beta_h(new_temp_data_mss)$.fitted * fn_nu_c(new_temp_data_mss)$.fitted * fn_sigma_s(new_temp_data_mss)$.fitted/
(fn_mu_m(new_temp_data_mss)$.fitted * (mu_h + mu_p) * fn_mu_c(new_temp_data_mss)$.fitted * preds_mu_i *
(fn_sigma_s(new_temp_data_mss)$.fitted + preds_mu_i))))^(1/2)
new_temp_data_mss
r_not_best_mss
new_temp_data_mss <- data.frame(temp = d$temp)
# combine two piece wise function of mu_i
preds_1 <- fn_mu_i_1(new_temp_data_mss)$.fitted[which(new_temp_data_mss$temp <= 37)]
preds_2 <- fn_mu_i_2(new_temp_data_mss)$.fitted[which(new_temp_data_mss$temp > 37)]
# This is mu_i function
preds_mu_i <- c(preds_1, preds_2)
r_not_best_mss <- (abs(lambda * fn_beta_s(new_temp_data_mss)$.fitted * h * fn_delta_e(new_temp_data_mss)$.fitted * nu_e
* fn_beta_h(new_temp_data_mss)$.fitted * fn_nu_c(new_temp_data_mss)$.fitted * fn_sigma_s(new_temp_data_mss)$.fitted/
(fn_mu_m(new_temp_data_mss)$.fitted * (mu_h + mu_p) * fn_mu_c(new_temp_data_mss)$.fitted * preds_mu_i *
(fn_sigma_s(new_temp_data_mss)$.fitted + preds_mu_i))))^(1/2)
nguyen_mss <- (fn_nguyen(new_temp_data_mss)$.fitted/max(fn_nguyen(new_temp_data_mss)$.fitted))*max(r_not_best_mss)
data_nss <- (d$prev/max(d$prev))*max(r_not_best_mss)
data_nss
nguyen_mss
r_not_best_mss
data_nss <- (d$prev/max(d$prev))*max(r_not_best_mss)
new_result <- sum((r_not_best_mss - data_nss)^2)
prev_result <- sum((nguyen_mss - data_nss)^2)
new_result
prev_result
new_result <- sum((r_not_best_mss - data_nss)^2)/length(data_nss)
prev_result <- sum((nguyen_mss - data_nss)^2)/length(data_nss)
new_result
prev_result
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/the_first_paper_code/may_5th_2023_ver_R_script/s.haematobium/r_not_mod_val_compare")
setwd("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/the_first_paper_code/may_5th_2023_ver_R_script/s.haematobium/r_not_mod_val_compare")
source("G:/.shortcut-targets-by-id/1e2xUwinp8NuntTAkfNCUIW_48Onf6MCd/Belmont Project/Thermal_sensitive_models/r_ibrahim_scripts/the_first_paper_code/may_5th_2023_ver_R_script/s.haematobium/r_not_mod_val_compare/haematobium_boot_r_not.R")
new_result
prev_result
